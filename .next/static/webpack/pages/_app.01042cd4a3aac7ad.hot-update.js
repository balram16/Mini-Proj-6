"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/lib/contexts/UserContext.tsx":
/*!******************************************!*\
  !*** ./src/lib/contexts/UserContext.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserProvider: function() { return /* binding */ UserProvider; },\n/* harmony export */   useUser: function() { return /* binding */ useUser; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sonner */ \"./node_modules/sonner/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ UserProvider,useUser auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Create mock books for testing\nconst mockBooks = [\n    {\n        _id: \"book-1\",\n        title: \"The Great Gatsby\",\n        author: \"F. Scott Fitzgerald\",\n        description: \"A classic novel about the American Dream set in the Jazz Age.\",\n        coverImage: \"https://source.unsplash.com/random/400x600/?book,gatsby\",\n        genre: [\n            \"Fiction\",\n            \"Classic\"\n        ],\n        rating: 4.5,\n        rentPrice: 5.99,\n        condition: \"Good\",\n        owner: \"2\",\n        available: true,\n        createdAt: \"2023-01-15T12:00:00Z\",\n        likes: [],\n        comments: []\n    },\n    {\n        _id: \"book-2\",\n        title: \"To Kill a Mockingbird\",\n        author: \"Harper Lee\",\n        description: \"A powerful story about racial injustice and moral growth in the American South.\",\n        coverImage: \"https://source.unsplash.com/random/400x600/?book,mockingbird\",\n        genre: [\n            \"Fiction\",\n            \"Classic\"\n        ],\n        rating: 4.8,\n        rentPrice: 6.99,\n        condition: \"Like New\",\n        owner: \"2\",\n        available: true,\n        createdAt: \"2023-02-20T15:30:00Z\",\n        likes: [],\n        comments: []\n    },\n    {\n        _id: \"book-3\",\n        title: \"Harry Potter and the Philosopher's Stone\",\n        author: \"J.K. Rowling\",\n        description: \"The first book in the Harry Potter series following the young wizard's adventures.\",\n        coverImage: \"https://source.unsplash.com/random/400x600/?book,harry-potter\",\n        genre: [\n            \"Fantasy\",\n            \"Young Adult\"\n        ],\n        rating: 4.7,\n        rentPrice: 7.99,\n        condition: \"Good\",\n        owner: \"2\",\n        available: true,\n        createdAt: \"2023-03-10T09:45:00Z\",\n        likes: [],\n        comments: []\n    }\n];\n// Create a mock user for testing\nconst mockUser = {\n    _id: \"1\",\n    name: \"Test User\",\n    email: \"test@example.com\",\n    avatar: \"https://api.dicebear.com/7.x/avataaars/svg?seed=TestUser\",\n    bio: \"I love reading and sharing books!\",\n    location: \"New York, NY\",\n    phone: \"+1234567890\",\n    books: [],\n    bookmarks: [],\n    borrowedBooks: [],\n    borrowedBooks: []\n};\nconst mockSettings = {\n    emailNotifications: true,\n    smsNotifications: false,\n    language: \"en\",\n    currency: \"USD\"\n};\nconst UserContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction UserProvider(param) {\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [allBooks, setAllBooks] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(mockBooks);\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // Function to load user data from token\n    const loadUser = async ()=>{\n        try {\n            const token = localStorage.getItem(\"booklendiverse_token\");\n            if (!token) {\n                setIsLoading(false);\n                return;\n            }\n            // Make API call to get user data\n            const response = await fetch(\"http://localhost:5000/api/users/me\", {\n                method: \"GET\",\n                headers: {\n                    \"x-auth-token\": token,\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                // If unauthorized, clear storage\n                if (response.status === 401) {\n                    localStorage.removeItem(\"booklendiverse_token\");\n                    localStorage.removeItem(\"booklendiverse_user\");\n                }\n                setIsLoading(false);\n                return;\n            }\n            const userData = await response.json();\n            setUser(userData);\n            // Could also fetch settings from API if needed\n            setSettings(mockSettings);\n        } catch (error) {\n            console.error(\"Error loading user:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Load user on initial mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        loadUser();\n    }, []);\n    // Load books from localStorage\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const storedBooks = localStorage.getItem(\"booklendiverse_books\");\n        if (storedBooks) {\n            try {\n                const parsedBooks = JSON.parse(storedBooks);\n                setAllBooks([\n                    ...mockBooks,\n                    ...parsedBooks\n                ]);\n            } catch (error) {\n                console.error(\"Error parsing stored books:\", error);\n            }\n        }\n    }, []);\n    // Save books to localStorage whenever they change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (allBooks.length > mockBooks.length) {\n            const booksToStore = allBooks.filter((book)=>!mockBooks.some((mockBook)=>mockBook._id === book._id));\n            localStorage.setItem(\"booklendiverse_books\", JSON.stringify(booksToStore));\n        }\n    }, [\n        allBooks\n    ]);\n    const login = async (email, password)=>{\n        try {\n            // Make a real API call to the backend\n            const response = await fetch(\"http://localhost:5000/api/users/login\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email,\n                    password\n                }),\n                credentials: \"include\"\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message || \"Login failed\");\n            }\n            console.log(\"Login response:\", data);\n            // Set token in localStorage\n            localStorage.setItem(\"booklendiverse_token\", data.token);\n            console.log(\"Token stored:\", data.token);\n            // Store user data - ensure _id is available\n            const userData = {\n                ...data.user,\n                _id: data.user._id || data.user.id // Ensure _id is available\n            };\n            setUser(userData);\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(userData));\n            // Initialize settings\n            setSettings(mockSettings);\n            // Reload user data to ensure we have complete information\n            await loadUser();\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Login successful\");\n            return {\n                redirectTo: \"/dashboard\"\n            };\n        } catch (error) {\n            console.error(\"Error logging in:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(error instanceof Error ? error.message : \"Login failed. Please check your credentials.\");\n            throw error;\n        }\n    };\n    const register = async (userData)=>{\n        try {\n            // Make real API call to the backend\n            const response = await fetch(\"http://localhost:5000/api/users/signup\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(userData),\n                credentials: \"include\"\n            });\n            const data = await response.json();\n            if (!response.ok) {\n                throw new Error(data.message || \"Registration failed\");\n            }\n            // Set token in localStorage\n            localStorage.setItem(\"booklendiverse_token\", data.token);\n            // Store user data - ensure _id is available\n            const newUser = {\n                ...data.user,\n                _id: data.user._id || data.user.id // Ensure _id is available\n            };\n            setUser(newUser);\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(newUser));\n            // Initialize settings\n            setSettings(mockSettings);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Registration successful\");\n            return newUser;\n        } catch (error) {\n            console.error(\"Error registering:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(error instanceof Error ? error.message : \"Registration failed. Please try again.\");\n            throw error;\n        }\n    };\n    const logout = async ()=>{\n        try {\n            const token = localStorage.getItem(\"booklendiverse_token\");\n            // Make API call to logout (invalidate token on server side)\n            if (token) {\n                try {\n                    await fetch(\"http://localhost:5000/api/users/logout\", {\n                        method: \"POST\",\n                        headers: {\n                            \"x-auth-token\": token,\n                            \"Content-Type\": \"application/json\"\n                        },\n                        credentials: \"include\"\n                    });\n                } catch (error) {\n                    console.error(\"Error during logout API call:\", error);\n                // Continue with client-side logout even if API call fails\n                }\n            }\n            // Clear local storage\n            localStorage.removeItem(\"booklendiverse_token\");\n            localStorage.removeItem(\"booklendiverse_user\");\n            // Reset state\n            setUser(null);\n            setSettings(null);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Logged out successfully\");\n            // Redirect to home page\n            if (true) {\n                window.location.href = \"/\";\n            }\n        } catch (error) {\n            console.error(\"Error logging out:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"Failed to log out. Please try again.\");\n            throw error;\n        }\n    };\n    const updateProfile = async (data)=>{\n        try {\n            const token = localStorage.getItem(\"booklendiverse_token\");\n            if (!token) throw new Error(\"Not authenticated\");\n            if (!user) throw new Error(\"No user logged in\");\n            // Make sure we're sending the correct fields\n            const updateData = {\n                name: data.name,\n                email: data.email,\n                phone: data.phone,\n                location: data.location,\n                bio: data.bio,\n                upiId: data.upiId\n            };\n            console.log(\"Sending profile update data:\", updateData);\n            console.log(\"Using token:\", token);\n            // Make API call to update profile\n            const response = await fetch(\"http://localhost:5000/api/users/profile\", {\n                method: \"PUT\",\n                headers: {\n                    \"x-auth-token\": token,\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(updateData),\n                credentials: \"include\"\n            });\n            const responseData = await response.json();\n            console.log(\"Server response:\", responseData);\n            if (!response.ok) {\n                throw new Error(responseData.message || responseData.error || \"Failed to update profile\");\n            }\n            // Update local user data\n            setUser((prevUser)=>({\n                    ...prevUser,\n                    ...responseData\n                }));\n            // Update localStorage\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify({\n                ...user,\n                ...responseData\n            }));\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Profile updated successfully\");\n            return responseData;\n        } catch (error) {\n            console.error(\"Error updating profile:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(error instanceof Error ? error.message : \"Failed to update profile\");\n            throw error;\n        }\n    };\n    const updateSettings = async (data)=>{\n        try {\n            // In a real app, we'd send a request to the backend\n            // For now, we'll just update the settings data\n            const updatedSettings = {\n                ...mockSettings,\n                ...data\n            };\n            setSettings(updatedSettings);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Settings updated successfully\");\n            return updatedSettings;\n        } catch (error) {\n            console.error(\"Error updating settings:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"Failed to update settings\");\n            throw error;\n        }\n    };\n    const addPaymentMethod = async (paymentMethod)=>{\n        try {\n            // In a real app, we'd send a request to the backend\n            // For now, we'll just add the payment method to the user data\n            if (!user) throw new Error(\"No user logged in\");\n            const updatedUser = {\n                ...user,\n                paymentMethods: [\n                    ...user.paymentMethods || [],\n                    paymentMethod\n                ]\n            };\n            setUser(updatedUser);\n            // Update localStorage\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Payment method added successfully\");\n        } catch (error) {\n            console.error(\"Error adding payment method:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"Failed to add payment method\");\n            throw error;\n        }\n    };\n    const removePaymentMethod = async (paymentMethodId)=>{\n        try {\n            var _user_paymentMethods;\n            // In a real app, we'd send a request to the backend\n            // For now, we'll just remove the payment method from the user data\n            if (!user) throw new Error(\"No user logged in\");\n            const updatedUser = {\n                ...user,\n                paymentMethods: ((_user_paymentMethods = user.paymentMethods) === null || _user_paymentMethods === void 0 ? void 0 : _user_paymentMethods.filter((pm)=>pm.id !== paymentMethodId)) || []\n            };\n            setUser(updatedUser);\n            // Update localStorage\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Payment method removed successfully\");\n        } catch (error) {\n            console.error(\"Error removing payment method:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"Failed to remove payment method\");\n            throw error;\n        }\n    };\n    const addBook = async (book)=>{\n        try {\n            if (!user) throw new Error(\"No user logged in\");\n            const token = localStorage.getItem(\"booklendiverse_token\");\n            if (!token) throw new Error(\"Not authenticated\");\n            console.log(\"Using token:\", token);\n            console.log(\"Book data:\", JSON.stringify(book));\n            // Make API call to create the book\n            const response = await fetch(\"http://localhost:5000/api/books\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-auth-token\": token\n                },\n                body: JSON.stringify(book),\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error(\"Error response from server:\", errorData);\n                throw new Error(errorData.message || \"Failed to create book\");\n            }\n            // Get the created book from response with server-generated ID\n            const newBook = await response.json();\n            console.log(\"Book created successfully:\", newBook);\n            // Add the book to all books\n            setAllBooks((prev)=>[\n                    ...prev,\n                    newBook\n                ]);\n            // Add the book to the user's books\n            const updatedUser = {\n                ...user,\n                books: [\n                    ...user.books || [],\n                    newBook\n                ]\n            };\n            setUser(updatedUser);\n            // Update localStorage\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n            // Reload user data to ensure we have complete information\n            await loadUser();\n            return newBook;\n        } catch (error) {\n            console.error(\"Error adding book:\", error);\n            throw error;\n        }\n    };\n    const getBooks = ()=>{\n        return allBooks;\n    };\n    const getBookById = (id)=>{\n        return allBooks.find((book)=>book._id === id);\n    };\n    const deleteBook = async (id)=>{\n        try {\n            var _user_books;\n            if (!user) throw new Error(\"No user logged in\");\n            const token = localStorage.getItem(\"booklendiverse_token\");\n            if (!token) throw new Error(\"Not authenticated\");\n            // Make API call to delete the book\n            const response = await fetch(\"http://localhost:5000/api/books/\".concat(id), {\n                method: \"DELETE\",\n                headers: {\n                    \"x-auth-token\": token,\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Failed to delete book\");\n            }\n            // Remove the book from all books\n            setAllBooks((prev)=>prev.filter((book)=>book._id !== id));\n            // Remove the book from the user's books\n            const updatedUser = {\n                ...user,\n                books: ((_user_books = user.books) === null || _user_books === void 0 ? void 0 : _user_books.filter((book)=>book._id !== id)) || []\n            };\n            setUser(updatedUser);\n            // Update localStorage\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n            // Reload user data to ensure we have complete information\n            await loadUser();\n        } catch (error) {\n            console.error(\"Error deleting book:\", error);\n            throw error;\n        }\n    };\n    const updateBook = async (id, data)=>{\n        try {\n            if (!user) throw new Error(\"No user logged in\");\n            // Find the book\n            const bookIndex = allBooks.findIndex((book)=>book._id === id);\n            if (bookIndex === -1) throw new Error(\"Book not found\");\n            // Update the book in all books\n            const updatedBook = {\n                ...allBooks[bookIndex],\n                ...data\n            };\n            const updatedAllBooks = [\n                ...allBooks\n            ];\n            updatedAllBooks[bookIndex] = updatedBook;\n            setAllBooks(updatedAllBooks);\n            // Update the book in the user's books if it belongs to the user\n            if (user.books) {\n                const userBookIndex = user.books.findIndex((book)=>book._id === id);\n                if (userBookIndex !== -1) {\n                    const updatedUserBooks = [\n                        ...user.books\n                    ];\n                    updatedUserBooks[userBookIndex] = updatedBook;\n                    const updatedUser = {\n                        ...user,\n                        books: updatedUserBooks\n                    };\n                    setUser(updatedUser);\n                    // Update localStorage\n                    localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n                }\n            }\n            return updatedBook;\n        } catch (error) {\n            console.error(\"Error updating book:\", error);\n            throw error;\n        }\n    };\n    // Toggle a bookmark for a book\n    const toggleBookmark = async (bookId)=>{\n        if (!user) {\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"You must be logged in to bookmark books\");\n            return false;\n        }\n        try {\n            const userBookmarks = user.bookmarks || [];\n            const isCurrentlyBookmarked = userBookmarks.includes(bookId);\n            let updatedBookmarks;\n            if (isCurrentlyBookmarked) {\n                // Remove bookmark\n                updatedBookmarks = userBookmarks.filter((id)=>id !== bookId);\n                sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Book removed from bookmarks\");\n            } else {\n                // Add bookmark\n                updatedBookmarks = [\n                    ...userBookmarks,\n                    bookId\n                ];\n                sonner__WEBPACK_IMPORTED_MODULE_3__.toast.success(\"Book added to bookmarks\");\n            }\n            const updatedUser = {\n                ...user,\n                bookmarks: updatedBookmarks\n            };\n            setUser(updatedUser);\n            localStorage.setItem(\"booklendiverse_user\", JSON.stringify(updatedUser));\n            return !isCurrentlyBookmarked;\n        } catch (error) {\n            console.error(\"Error toggling bookmark:\", error);\n            sonner__WEBPACK_IMPORTED_MODULE_3__.toast.error(\"Failed to update bookmarks\");\n            return false;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(UserContext.Provider, {\n        value: {\n            user,\n            settings,\n            isLoading,\n            login,\n            register,\n            logout,\n            updateProfile,\n            updateSettings,\n            addPaymentMethod,\n            removePaymentMethod,\n            addBook,\n            getBooks,\n            getBookById,\n            deleteBook,\n            updateBook,\n            toggleBookmark\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"E:\\\\mini proj  6\\\\booklendiverse-main\\\\booklendiverse-main\\\\booklendiverse-main\\\\src\\\\lib\\\\contexts\\\\UserContext.tsx\",\n        lineNumber: 677,\n        columnNumber: 5\n    }, this);\n}\n_s(UserProvider, \"r6FaEDGQdBMHYeJZMosfD8wfEsc=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = UserProvider;\nfunction useUser() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(UserContext);\n    if (context === undefined) {\n        throw new Error(\"useUser must be used within a UserProvider\");\n    }\n    return context;\n}\n_s1(useUser, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/contexts/UserContext.tsx\n"));

/***/ })

});